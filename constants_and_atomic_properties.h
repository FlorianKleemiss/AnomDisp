#pragma once
#include "convenience.h"

const double a0 = 0.529177210903E-10; //in m
const double h = 6.62607015E-34/1.602176634E-19; //in eV*s
const double Ryd_ener = 13.6056923; //in eV
const double alpha = 0.0072973525693; //Sommerfeld fine structure constant
const double alpha_sq = pow(alpha,2);
const double el_mass = 9.1093837015E-31; //in kg
const double el_charge = 1.602176634E-19; // in C
const double prefactor = pow(el_charge,2)/(2*pow(PI,2)*el_mass);
const double speed_of_light = 2.99792458E8; //m/s
const double r_0 = pow(el_charge,2)/el_charge/pow(speed_of_light,2);
const double r_0_for_nu = pow(el_charge,2)/el_charge;
const double angstrom2eV = 1.23984193 * 10000; // eV*µm * µm/Angstrom
const double barn2bohr = 2.80028520539078E+7;
const double constant_factor = 4*PI2*el_mass/h/h; //p_0 according to Hönl's Waller paper (1933) Page 646

double q(double nu){
  return 2*PI*nu/speed_of_light;
}

cdouble n_prime_from_z(cdouble z,double n_0){
  return n_0/std::sqrt(z-1.0);
}

cdouble exp_from_z(double z, double n_0){
  cdouble z_1 = z-1;
  cdouble temp = 0.0;
  cdouble sqrt_var = std::sqrt(z_1);
  //if(z<=1):
  //  temp -= 2/3.0*z_1*special.hyp2f1(0.75,1,1.75,z_1*z_1)
  temp += std::atan(sqrt_var)/sqrt_var;
  temp = std::exp(-2.0*n_0*temp);
  return temp;
}

double get_Zeff_1s(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    1.0,                                                                                                                                                                                                                  1.618,
           2.618, 3.614,                                                                                                                                                                         4.603, 5.587, 6.570, 7.553, 8.534, 9.515,
          10.498,11.484,                                                                                                                                                                        12.471,13.459,14.448,15.437,16.427,17.417,
          18.408,19.400,                                                                                                  20.394,21.388,22.382,23.378,24.372,25.368,26.364,27.360,28.357,29.353,30.349,31.345,32.341,33.337,34.333,35.329,
          36.325,37.322,                                                                                                  38.318,39.315,40.311,41.308,42.308,43.302,44.299,45.296,46.294,47.291,48.288,49.285,50.282,51.280,52.277,53.274,
          54.271,55.269,56.266,57.264,58.262,59.259,60.257,61.255,62.252,63.250,64.248,65.246,66.244,67.241,68.239,69.237,70.234,71.232,72.230,73.227,74.225,75.222,76.220,77.217,78.214,79.211,80.208,81.204,82.200,83.197,84.192,85.186,
          86.182,87.176,88.171,89.165,90.158,91.149,92.143,93.134,94.123,95.115,96.105,97.093,98.081,99.067,100.051,101.034,102.017,102.997,103.976,104.941,105.914,106.884,107.851,108.815,109.775,110.731,111.684,112.631,113.574,114.511,115.442,116.367
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_2s(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {   0.0,                                                                                                                                                                                                                      0.0,
            1.550, 2.266,                                                                                                                                                                         3.036, 3.776, 4.505, 5.257, 5.997, 6.731,
            7.708, 8.699,                                                                                                                                                                         9.686,10.669,11.648,12.625,13.599,14.572,
           15.550,16.530,                                                                                                  17.510,18.490,19.468,20.446,21.421,22.397,23.373,24.348,25.324,26.298,27.273,28.248,29.224,30.201,31.179,32.158,
           33.139,34.121,                                                                                                  35.105,36.089,37.074,38.060,39.048,40.036,41.025,42.014,43.005,43.997,44.989,45.982,46.976,47.971,48.967,49.963,
           50.960,51.958,52.957,53.960,54.966,55.971,56.976,57.982,58.989,59.994,61.004,62.013,63.023,64.033,65.044,66.055,67.065,68.076,69.087,70.099,71.111,72.123,73.136,74.149,75.163,76.177,77.192,78.207,79.222,80.238,81.254,82.270,
           83.287,84.304,85.322,86.340,87.359,88.376,89.397,90.416,91.435,92.455,93.476,94.495,95.515,96.534,97.552,98.571,99.589,100.607,101.623,102.631,103.644,104.656,105.666,106.674,107.680,108.684,109.684,110.682,111.676,112.666,113.651,114.631
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_2p_1_2(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                         2.268, 2.916, 3.547, 4.022, 4.598, 5.185,
            6.268, 7.306,                                                                                                                                                                         8.343, 9.362,10.355,11.356,12.357,13.340,
           14.330,15.320,                                                                                                  16.303,17.286,18.270,19.263,20.224,21.218,22.194,23.172,24.161,25.137,26.114,27.093,28.071,29.051,30.033,31.014,
           31.998,32.983,                                                                                                  33.968,34.955,35.943,36.932,37.922,38.912,39.903,40.897,41.890,42.884,43.879,44.875,45.872,46.869,47.868,48.867,
           49.867,50.868,51.870,52.876,53.886,54.894,55.903,56.913,57.924,58.933,59.947,60.960,61.973,62.988,64.003,65.019,66.034,67.049,68.065,69.082,70.099,71.116,72.135,73.154,74.173,75.193,76.214,77.236,78.258,79.281,80.304,81.329,
           82.354,83.380,84.406,85.434,86.463,87.492,88.523,89.554,90.586,91.618,92.652,93.687,94.722,95.757,96.794,97.831,98.868,99.906,100.945,101.982,103.021,104.061,105.101,106.141,107.181,108.220,109.260,110.299,111.337,112.374,113.410,114.444
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_2p_3_2(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                         2.268, 2.916, 3.546, 4.082, 4.615, 5.175,
            6.256, 7.292,                                                                                                                                                                         8.313, 9.323,10.332,11.321,12.306,13.304,
           14.289,15.275,                                                                                                  16.262,17.244,18.222,19.193,20.165,21.140,22.112,23.081,24.045,25.011,25.976,26.942,27.909,28.876,29.844,30.813,
           31.782,32.752,                                                                                                  33.723,34.695,35.666,36.637,37.610,38.582,39.555,40.528,41.501,42.474,43.447,44.421,45.395,46.370,47.345,48.319,
           49.295,50.270,51.245,52.225,53.209,54.189,55.170,56.151,57.132,58.111,59.095,60.077,61.058,62.040,63.021,64.003,64.983,65.962,66.941,67.919,68.897,69.875,70.853,71.830,72.807,73.784,74.761,75.737,76.713,77.689,78.665,79.640,
           80.615,81.590,82.565,83.539,84.515,85.489,86.464,87.439,88.413,89.386,90.361,91.334,92.307,93.279,94.251,95.223,96.194,97.164,98.134,99.103,100.072,101.040,102.007,102.974,103.940,104.905,105.870,106.834,107.797,108.759,109.721,110.682
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_3s(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
            3.212, 4.156,                                                                                                                                                                         5.201, 6.127, 6.999, 7.863, 8.699, 9.519,
           10.601,11.677,                                                                                                  12.549,13.377,14.189,14.875,15.776,16.578,17.370,18.157,18.835,19.719,20.623,21.549,22.489,23.439,24.397,25.359,
           26.331,27.308,                                                                                                  28.285,29.264,30.240,31.220,32.203,33.181,34.163,35.143,36.127,37.113,38.100,39.088,40.079,41.071,42.064,43.060,
           44.058,45.058,46.059,47.065,48.075,49.081,50.089,51.097,52.106,53.112,54.126,55.137,56.150,57.163,58.178,59.193,60.207,61.222,62.238,63.256,64.275,65.296,66.318,67.341,68.367,69.395,70.425,71.456,72.489,73.525,74.562,75.601,
           76.642,77.685,78.730,79.777,80.827,81.876,82.930,83.985,85.041,86.100,87.161,88.222,89.286,90.352,91.418,92.487,93.558,94.629,95.702,96.770,97.844,98.920,99.997,101.074,102.151,103.230,104.308,105.386,106.464,107.541,108.617,109.691
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_3p_1_2(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
              0.0,   0.0,                                                                                                                                                                         3.642, 4.543, 5.386, 6.041, 6.786, 7.541,
            8.726, 9.837,                                                                                                  10.673,11.471,12.251,12.864,13.766,14.537,15.297,16.053,16.667,17.544,18.468,19.420,20.370,21.342,22.324,23.298,
           24.283,25.271,                                                                                                  26.261,27.250,28.238,29.226,30.214,31.201,32.189,33.176,34.164,35.152,36.144,37.138,38.131,39.129,40.128,41.128,
           42.130,43.134,44.140,45.148,46.159,47.170,48.182,49.195,50.214,51.224,52.238,53.253,54.272,55.292,56.313,57.337,58.356,59.377,60.398,61.421,62.446,63.473,64.501,65.531,66.563,67.598,68.635,69.674,70.715,71.759,72.805,73.853,
           74.904,75.957,77.012,78.069,79.130,80.193,81.258,82.327,83.398,84.470,85.546,86.624,87.706,88.789,89.876,90.965,92.057,93.151,94.248,95.346,96.448,97.554,98.662,99.772,100.886,102.003,103.122,104.245,105.370,106.497,107.627,108.759
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_3p_3_2(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
              0.0,   0.0,                                                                                                                                                                           0.0, 4.541, 5.376, 6.083, 6.781, 7.502,
            8.685, 9.791,                                                                                                  10.633,11.415,12.178,12.774,13.666,14.422,15.163,15.898,16.495,17.356,18.257,19.184,20.136,21.083,22.037,23.012,
           23.977,24.946,                                                                                                  25.914,26.882,27.848,28.812,29.776,30.738,31.698,32.656,33.614,34.573,35.531,36.491,37.454,38.416,39.379,40.344,
           41.309,42.275,43.241,44.211,45.186,46.153,47.120,48.085,49.047,50.008,50.978,51.942,52.904,53.865,54.825,55.785,56.742,57.699,58.656,59.613,60.569,61.527,62.484,63.440,64.398,65.356,66.314,67.273,68.233,69.193,70.154,71.115,
           72.076,73.038,74.001,74.963,75.927,76.891,77.855,78.819,79.783,80.747,81.712,82.676,83.641,84.605,85.570,86.535,87.499,88.463,89.527,90.391,91.355,92.319,93.283,94.246,95.209,96.172,97.135,98.098,99.060,100.023,100.984,101.946
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_3d_3_2(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
              0.0,   0.0,                                                                                                   6.216, 7.146, 7.904, 7.631, 9.246, 9.670,10.240,10.829,10.584,11.978,13.272,14.501,15.694,16.822,17.929,19.018,
           20.096,21.166,                                                                                                  22.234,23.290,24.335,25.361,26.384,27.406,28.416,29.429,30.430,31.428,32.424,33.419,34.413,35.405,36.396,37.387,
           38.377,39.368,40.358,41.345,42.322,43.308,44.294,45.280,46.275,47.253,48.220,49.196,50.176,51.156,52.138,53.121,54.092,55.062,56.032,57.001,57.969,58.939,59.908,60.876,61.844,62.813,63.782,64.752,65.721,66.691,67.661,68.632,
           69.602,70.573,71.545,72.516,73.487,74.459,75.431,76.403,77.379,78.351,79.322,80.295,81.268,82.242,83.215,84.189,85.161,86.133,87.105,88.077,89.048,90.020,90.991,91.961,92.932,93.902,94.872,95.842,96.811,97.781,98.749,99.718
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double get_Zeff_3d_5_2(int Z){
  //Get the shielding constant according to the data in https://research.unl.pt/ws/portalfiles/portal/13073849/ADNDT_2016_7_Revision_2.pdf
  double Zeff[] = {    0.0,                                                                                                                                                                                                                     0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
              0.0,   0.0,                                                                                                                                                                           0.0,   0.0,   0.0,   0.0,   0.0,   0.0,
              0.0,   0.0,                                                                                                     0.0, 7.139, 7.845, 7.608, 9.225, 9.779,10.300,10.805,10.479,11.886,13.228,14.457,15.613,16.751,17.850,18.924,
           19.998,21.062,                                                                                                  22.117,23.160,24.199,25.232,26.247,27.251,28.253,29.271,30.264,31.254,32.242,33.228,34.212,35.195,36.176,37.157,
           38.137,39.116,40.094,41.078,42.068,43.044,44.016,44.985,45.944,46.907,47.886,48.851,49.811,50.768,51.723,52.674,53.626,54.578,55.528,56.479,57.430,58.379,59.329,60.279,61.228,62.177,63.125,64.074,65.022,65.970,66.918,67.866,
           68.814,69.762,70.709,71.657,72.606,73.554,74.502,75.450,76.395,77.341,78.288,79.233,80.178,81.122,82.066,83.009,83.952,84.893,85.835,86.776,87.716,88.656,89.595,90.534,91.472,92.409,93.346,94.282,95.217,96.151,97.085,98.018
  };
  if (Z<=118) return Zeff[Z-1];
  else exit(-1);
}

double b(int n_0, int l_0 , int Z){
  double Z_eff = -20;
  if (n_0 == 1)
    Z_eff = get_Zeff_1s(Z);
  else if (n_0 == 2)
    if (l_0 == 0)
      Z_eff = get_Zeff_2s(Z);
    else if (l_0 == 1)
      Z_eff = get_Zeff_2p_1_2(Z);
    else if (l_0 == 2)
      Z_eff = get_Zeff_2p_3_2(Z);
  else if (n_0 == 3)
    if (l_0 == 0)
      Z_eff = get_Zeff_3s(Z);
    else if (l_0 == 1)
      Z_eff = get_Zeff_3p_1_2(Z);
    else if (l_0 == 2)
      Z_eff = get_Zeff_3d_3_2(Z);
  err_checkf(Z_eff != -20,"WRONG FUNCTION!", std::cout);
  return Z_eff/(n_0*a0);
}